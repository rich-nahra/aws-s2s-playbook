- name: site to site vpn 
  hosts: control
  gather_facts: no
  become: no
  vars:
    ansible_python_interpreter: /usr/bin/python3
  environment:
    #AWS_PROFILE: orgs
    AWS_DEFAULT_REGION: us-east-2
  pre_tasks:
    - name: Install boto3 and botocore with pip3 module
      pip:
        name: 
        - boto3
        - botocore
        - lxml
  tasks:
    - name: get vpn client configuration
      ec2_vpc_vpn_info:
        region: us-east-2
      register: vpn_info
    
    - name: parse xml and set fact 
      set_fact: 
        vpn_config: "{{ vpn_info.vpn_connections[0].customer_gateway_configuration | xml_to_json }}"

- name: site to site vpn 
  hosts: vpn
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    vpn_config: "{{ hostvars[groups['control'][0]]['vpn_config'] }}"
    aws_cidr: '10.0.0.0/16'
    sysctl_config:
      net.ipv4.ip_forward: 1
  handlers:
    - name: restart multipathd
      ansible.builtin.service:
        name: multipathd
        state: restarted
    - name: enable ipsec
      systemd:
        name: ipsec
        state: restarted
        enabled: yes    
  tasks: 
    - name: install strongswan packages
      package:
        name: 
          - strongswan
          - strongswan-pki
          - libcharon-extra-plugins
          - libcharon-extauth-plugins
          - libstrongswan-extra-plugins
          - strongswan-charon
          - charon-systemd
          - wpasupplicant
        state: latest
    
    - name: creates ipsec drop directory
      file:
        path: /etc/ipsec.d
        state: directory

    - name: generate and push config files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode }}"
        backup: yes
      loop:
       - { src: strongswan.conf.j2, dest: /etc/strongswan.conf, mode: '0644' }
       - { src: ipsec.conf.j2, dest: /etc/ipsec.conf, mode: '0644' }
       - { src: ipsec.secrets.j2, dest: /etc/ipsec.secrets, mode: '0644' }
       - { src: aws-updown.sh.j2, dest: /etc/ipsec.d/aws-updown.sh, mode: '0744' }
      notify: enable ipsec

    - name: fix esx disk uuid
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode }}"
        backup: yes
      loop:
       - { src: multipath.conf.j2, dest: /etc/multipath.conf, mode: '0644'}
      notify: restart multipathd
    
    - name: Change various sysctl-settings
      sysctl:
        name: '{{ item.key }}'
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
      with_dict: '{{ sysctl_config }}'
             
